Representación Textual del archivo de Excel: "Filtros Catálogo.xlsm"
Fecha y hora de generación: 30/07/2016 01:21:50 p.m.

Resumen
=======
 * Hojas: 4
 * Nombres Definidos: 21
 * Módulos de Visual Basic: 8
 * Líneas de código VB: 131

Detalle
=======

Hojas:
 [Captura]
 [Listados]
 [N]
 [S]

Contenido:
[Captura]
[A1] \Captura\
[A3] \TIPO\
[A5] \MARCA\
[A7] \AUTO\
[B3] (SELECCION_TIPO) \N\
 DataValidation: Lista. [Fuente:"=OFFSET(METACAT,0,0,,1)" ListaEnCelda:True ]
 Mensaje=[Mostrar:True Titulo:"" Mensaje:"" ] 
 Advertencia=[Mostrar:True Titulo:"" Mensaje:"" Estilo:Grave ] 
 OmitirBlancos:False DatoActualEsVálido:True 

[B5] (SELECCION_MARCA) \Baic\
 DataValidation: Lista. [Fuente:"=OFFSET(DESTINO_MARCAS,1,0,CONTEO_MARCAS,1)" ListaEnCelda:True ]
 Mensaje=[Mostrar:True Titulo:"" Mensaje:"" ] 
 Advertencia=[Mostrar:True Titulo:"" Mensaje:"" Estilo:Grave ] 
 OmitirBlancos:False DatoActualEsVálido:True 

[B7] (SELECCION_AUTO) \No sabe fallar\
 DataValidation: Lista. [Fuente:"=OFFSET(DESTINO_AUTOS,1,-2,CONTEO_AUTOS,1)" ListaEnCelda:True ]
 Mensaje=[Mostrar:True Titulo:"" Mensaje:"" ] 
 Advertencia=[Mostrar:True Titulo:"" Mensaje:"" Estilo:Grave ] 
 OmitirBlancos:False DatoActualEsVálido:True 


[Listados]
[A1] \Listados\
[A3] (Metacat.Catálogo) \=SELECCION_TIPO\
[A4] \Catálogo\
[A5] \N\
[A6] \S\
[A9] \Zona de Resultados\
[A11] \Marcas\
[A15] \Conteo\
[A16] (CONTEO_MARCAS) \=COUNTA(A19:A1048576)\
[A18] (DESTINO_MARCAS) \MARCA\
[A19] \Baic\
[A20] \Honda\
[A21] \Nissan\
[A22] \Toyota\
[B3] (Metacat.Ubicación) \=VLOOKUP(Metacat.Catálogo,METACAT,COLUMN()-COLUMN(Metacat.Catálogo)+1,0)\
[B4] \Ubicación\
[B5] \N!A3:C13\
[B6] \CATALOGO_S\
[C3] (Metacat.Campo_Marca) \=VLOOKUP(Metacat.Catálogo,METACAT,COLUMN()-COLUMN(Metacat.Catálogo)+1,0)\
[C4] \Campo Marca\
[C5] \MARCA\
[C6] \Brand\
[C11] \Autos\
[C13] \Parte 2\
[C15] \Conteo\
[Listados]
[C16] (CONTEO_AUTOS) \=COUNTA(C19:C1048576)\
[C18] (Listados!Extract) \AUTO\
[C19] \No sabe fallar\
[C20] \Zameid\
[D3] (Metacat.Campo_Auto) \=VLOOKUP(Metacat.Catálogo,METACAT,COLUMN()-COLUMN(Metacat.Catálogo)+1,0)\
[D4] \Campo Auto\
[D5] \AUTO\
[D6] \Carro\
[E13] \Parte 1\
[E15] \=Metacat.Campo_Marca\
[E16] \=SELECCION_MARCA\
[E18] (DESTINO_AUTOS) \MARCA\
[E19] \Baic\
[E20] \Baic\
[F18] \AUTO\
[F19] \Zameid\
[F20] \No sabe fallar\
[G1] \Consideraciones\
[G3] \La [Metacat.Ubicación] debe de poder ser accesible usando "notación global"\
[G18] \DATO\
[G19] \--\
[G20] \?\

[N]
[A1] \Catálogo N\
[A3] \MARCA\
[A4] \Honda\
[A5] \Honda\
[A6] \Nissan\
[A7] \Nissan\
[A8] \Honda\
[A9] \Toyota\
[A10] \Baic\
[A11] \Honda\
[A12] \Honda\
[A13] \Baic\
[B3] \AUTO\
[B4] \Fit\
[B5] \Civic\
[B6] \Sentra\
[B7] \Ventra\
[B8] \CRV\
[B9] \TuHoyota\
[B10] \Zameid\
[B11] \Accord\
[B12] \Civic\
[B13] \No sabe fallar\
[C3] \DATO\
[C4] \a\
[N]
[C5] \b\
[C6] \c\
[C7] \d\
[C8] \e\
[C9] \g\
[C10] \--\
[C11] \x\
[C12] \b\
[C13] \?\

[S]
[A1] \Catálogo S\
[A3] \Brand\
[A4] \Hummer\
[A5] \Hummer\
[A6] \Ford\
[A7] \Ford\
[A8] \Chevrolet\
[A9] \Chevrolet\
[B3] \Carro\
[B4] \H3\
[B5] \H2\
[B6] \Ka\
[B7] \Exploter\
[B8] \Spank\
[B9] \Chevy\
[C3] \Campo\
[C4] \8.81063830658396\
[C5] \7.26757075058705\
[C6] \1.17157911971267\
[C7] \4.03875095145369\
[C8] \6.13038631666927\
[C9] \6.21706932805607\
[D3] \Traviesa\
[D4] \6.30113621112\
[D5] \4.33891429727652\
[S]
[D6] \4.98945367454637\
[D7] \3.33697476316045\
[D8] \6.10761154948007\
[D9] \7.30097305044152\

Nombres:
 [Captura!_FilterDatabase] =S!$A$3:$D$9
 [Listados!_FilterDatabase] =Listados!$F$18:$F$20
 [N!_FilterDatabase] =N!$A$3:$C$13
 [S!_FilterDatabase] =S!$A$3:$D$9
 [CATALOGO_N] =N!$A$3:$C$13
 [CATALOGO_S] =S!$A$3:$D$9
 [CONDICION_MARCA] =Listados!$E$15:$E$16
 [CONTEO_AUTOS] =Listados!$C$16
 [CONTEO_MARCAS] =Listados!$A$16
 [DESTINO_AUTOS] =Listados!$E$18
 [DESTINO_MARCAS] =Listados!$A$18
 [Listados!Extract] =Listados!$C$18
 [INPUT_CELLS] =Captura!$B$3,Captura!$B$5,Captura!$B$7
 [METACAT] =Listados!$A$5:$D$6
 [Metacat.Campo_Auto] =Listados!$D$3
 [Metacat.Campo_Marca] =Listados!$C$3
 [Metacat.Catálogo] =Listados!$A$3
 [Metacat.Ubicación] =Listados!$B$3
 [SELECCION_AUTO] =Captura!$B$7
 [SELECCION_MARCA] =Captura!$B$5
 [SELECCION_TIPO] =Captura!$B$3

Nombre del proyecto VB: [VBAProject]

Módulos VBA:
 [ThisWorkbook] Tipo: 100
 [Sheet1] Tipo: 100
 [Module1] Tipo: 1
 [Module2] Tipo: 1
 [Sheet2] Tipo: 100
 [Sheet3] Tipo: 100
 [Sheet4] Tipo: 100
 [EventHandlers] Tipo: 1

Codigo:
[ThisWorkbook] 0 líneas de código.
///--- BEGINNING OF MODULE ---
\\\--- END OF MODULE ---

[Sheet1] 4 líneas de código.
///--- BEGINNING OF MODULE ---
Private Sub Worksheet_Change(ByVal Target As Range)
    Captura_Change Target
End Sub

\\\--- END OF MODULE ---

[Module1] 60 líneas de código.
///--- BEGINNING OF MODULE ---
'Lista única de Marcas
Sub ExtraerÚnicosPorColumna(NomRangoNombrado As String, NomColumna As String, RgDestino As Range)
    
    'Limpiamos resultados previos
    RgDestino.CurrentRegion.ClearContents
    
    'Determinamos la columna a extraer los valores únicos
    Dim rgHeader: Set rgHeader = Range(NomRangoNombrado).CurrentRegion.Rows(1).Find(NomColumna)
    
    Intersect(rgHeader.CurrentRegion, _
              rgHeader.EntireColumn).AdvancedFilter Action:=xlFilterCopy, _
                                                    CopyToRange:=RgDestino, _
                                                    Unique:=True, _
                                                    criteriaRange:=""
End Sub

'Lista filtrada por una Marca particular
Sub ExtraerPorCriteria(NomRangoNombrado As String, RgCriteria As Range, RgDestino As Range)
    'Limpiamos resultados previos
    RgDestino.CurrentRegion.ClearContents
    
    Range(NomRangoNombrado).AdvancedFilter Action:=xlFilterCopy, _
                                           criteriaRange:=RgCriteria, _
                                           CopyToRange:=RgDestino, _
                                           Unique:=True
End Sub

Sub OrdenarFilasPorNombreDeColumna(rgAOrdenar As Range, NomColumna As String)
    Set rgAOrdenar = rgAOrdenar.CurrentRegion
    'Determinar la columna de ordenamiento
    Dim rgHeader: Set rgHeader = rgAOrdenar.Rows(1).Find(NomColumna)
        
    If rgHeader Is Nothing Then Exit Sub 'No existe la columna? Nothing to do.
    
    'Determinar el Rango (Columna sin encabezado)
    Dim rgKey As Range
    Set rgKey = Intersect(rgHeader.EntireColumn, _
                          rgAOrdenar, _
                          rgAOrdenar.Offset(1, 0))
    
    If rgKey Is Nothing Then Exit Sub 'No hay filas?
    
    With rgAOrdenar.Parent.Sort
        .SortFields.Clear
        
        .SortFields.Add Key:=rgKey, _
                        SortOn:=xlSortOnValues, _
                        Order:=xlAscending, _
                        DataOption:=xlSortNormal
                             
        .SetRange rgAOrdenar
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
End Sub

\\\--- END OF MODULE ---

[Module2] 22 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit

'Si la selección de la celda no es válida, seleccionar la primera disponible.
Sub ValidarComboDV(AValidar As Range)
    
    Debug.Print "Validando " & AValidar.Name.Name & " [" & AValidar.Value & "]"
    
    If Not AValidar.Validation.Value Then
        
        On Error Resume Next 'Si no hay un rango válido, ocurre un error y el objeto 'Is Nothing'
        Dim rgOpcionesVálidas As Range: Set rgOpcionesVálidas = Range(AValidar.Validation.Formula1)
        On Error GoTo 0
        
        Dim NewValue: NewValue = ""
        If Not rgOpcionesVálidas Is Nothing Then _
            NewValue = rgOpcionesVálidas.Cells(1)
        Debug.Print "...No Válido. Asignado [" & NewValue & "]"
        AValidar.Value = NewValue
    Else
        Debug.Print "...Válido"
    End If
End Sub
\\\--- END OF MODULE ---

[Sheet2] 0 líneas de código.
///--- BEGINNING OF MODULE ---
\\\--- END OF MODULE ---

[Sheet3] 0 líneas de código.
///--- BEGINNING OF MODULE ---
\\\--- END OF MODULE ---

[Sheet4] 0 líneas de código.
///--- BEGINNING OF MODULE ---
\\\--- END OF MODULE ---

[EventHandlers] 45 líneas de código.
///--- BEGINNING OF MODULE ---
Sub Captura_Change(ByVal Target As Range)
On Error GoTo ErrHan
    If Application.Intersect(Target, [INPUT_CELLS]) Is Nothing Then Exit Sub
    
    Debug.Print "Manejando cambio en " & Target.Name.Name & " a [" & Target.Value & "]"
    
    ValidarComboDV [SELECCION_TIPO]
        
    Call Actualizar_Marcas
    
    Call Actualizar_Autos
    
ErrHan:
    If Err.Number <> 0 Then _
        Debug.Print Err.Number & " - " & Err.Description
End Sub

Sub Actualizar_Marcas()
    Debug.Print "Actualizando Marcas..."
    
    ExtraerÚnicosPorColumna [Metacat.Ubicación], _
                            [Metacat.Campo_Marca], _
                            [Destino_Marcas]
    
    OrdenarFilasPorNombreDeColumna [Destino_Marcas], [Metacat.Campo_Marca]
    
    ValidarComboDV [SELECCION_MARCA]
End Sub

Sub Actualizar_Autos()
    Debug.Print "Actualizando Autos..."
    
    'Parte 1
    ExtraerPorCriteria [Metacat.Ubicación], _
                       [Condicion_Marca], _
                       [DESTINO_AUTOS]
    
    'Parte 2
    ExtraerÚnicosPorColumna "Destino_Autos", _
                            [Metacat.Campo_Auto], _
                            [DESTINO_AUTOS].Offset(0, -2)
    
    OrdenarFilasPorNombreDeColumna [DESTINO_AUTOS].Offset(0, -2), [Metacat.Campo_Auto]
    ValidarComboDV [SELECCION_AUTO]
End Sub
\\\--- END OF MODULE ---


** Fin del proceso de exportación. Proceso realizado en 0.00 minutos. **
ExportToTxt [ExportToTxt.xls] v3.0.0-SNAPSHOT (Standalone)
