Representación Textual del archivo de Excel: "Filtros Catálogo.xlsm"
Fecha y hora de generación: 30/07/2016 11:39:16 a.m.

Resumen
=======
 * Hojas: 4
 * Nombres Definidos: 22
 * Módulos de Visual Basic: 7
 * Líneas de código VB: 107

Detalle
=======

Hojas:
 [Captura]
 [Listados]
 [N]
 [S]

Contenido:
[Captura]
[A1] \Captura\
[A3] \TIPO\
[A5] \MARCA\
[A7] \AUTO\
[B3] (SELECCION_TIPO) \N\
 DataValidation: Lista. [Fuente:"=OFFSET(METACAT,0,0,,1)" ListaEnCelda:True ]
 Mensaje=[Mostrar:True Titulo:"" Mensaje:"" ] 
 Advertencia=[Mostrar:True Titulo:"" Mensaje:"" Estilo:Grave ] 
 OmitirBlancos:False DatoActualEsVálido:True 

[B5] (SELECCION_MARCA) \Baic\
 DataValidation: Lista. [Fuente:"=OFFSET(DESTINO_MARCAS,1,0,CONTEO_MARCAS,1)" ListaEnCelda:True ]
 Mensaje=[Mostrar:True Titulo:"" Mensaje:"" ] 
 Advertencia=[Mostrar:True Titulo:"" Mensaje:"" Estilo:Grave ] 
 OmitirBlancos:False DatoActualEsVálido:True 

[B7] (SELECCION_AUTO) \No sabe fallar\
 DataValidation: Lista. [Fuente:"=OFFSET(DESTINO_AUTOS,1,1,CONTEO_AUTOS,1)" ListaEnCelda:True ]
 Mensaje=[Mostrar:True Titulo:"" Mensaje:"" ] 
 Advertencia=[Mostrar:True Titulo:"" Mensaje:"" Estilo:Grave ] 
 OmitirBlancos:False DatoActualEsVálido:True 


[Listados]
[A1] \Listados\
[A3] (Metacat.Catálogo) \=SELECCION_TIPO\
[A4] \Catálogo\
[A5] \N\
[A6] \S\
[A9] \Zona de Resultados\
[A11] \Marcas\
[A13] \Conteo\
[A14] (CONTEO_MARCAS) \=COUNTA(A17:A1048576)\
[A16] (DESTINO_MARCAS) \MARCA\
[A17] \Baic\
[A18] \Honda\
[A19] \Nissan\
[A20] \Toyota\
[B3] (Metacat.Rango_Nombrado) \=VLOOKUP(Metacat.Catálogo,METACAT,COLUMN()-COLUMN(Metacat.Catálogo)+1,0)\
[B4] \Rango Nombrado\
[B5] \CATALOGO_N\
[B6] \CATALOGO_S\
[C3] (Metacat.Campo_Marca) \=VLOOKUP(Metacat.Catálogo,METACAT,COLUMN()-COLUMN(Metacat.Catálogo)+1,0)\
[C4] \Campo Marca\
[C5] \MARCA\
[C6] \Brand\
[C11] \Autos\
[C13] \=Metacat.Campo_Marca\
[C14] \=SELECCION_MARCA\
[Listados]
[C16] (DESTINO_AUTOS) \MARCA\
[C17] \Baic\
[C18] \Baic\
[D3] (Metacat.Campo_Auto) \=VLOOKUP(Metacat.Catálogo,METACAT,COLUMN()-COLUMN(Metacat.Catálogo)+1,0)\
[D4] \Campo Auto\
[D5] \AUTO\
[D6] \Carro\
[D13] \Conteo\
[D14] (CONTEO_AUTOS) \=COUNTA(D17:D1048576)\
[D16] \AUTO\
[D17] \No sabe fallar\
[D18] \Zameid\
[E16] \DATO\
[E17] \?\
[E18] \--\
[G1] \Consideraciones\
[G3] \Los Rangos Nombrados que define la celda [Metacat.Rango_Nombrado] deben de ser globales.\
[G4] \El Combo de Autos siempre apunta a la segunda columna de la zona de resultados de auto. \

[N]
[A1] \Catálogo N\
[A3] \MARCA\
[A4] \Honda\
[A5] \Honda\
[A6] \Nissan\
[A7] \Nissan\
[A8] \Honda\
[A9] \Toyota\
[A10] \Baic\
[A11] \Honda\
[A12] \Honda\
[A13] \Baic\
[B3] \AUTO\
[B4] \Accord\
[B5] \Civic\
[B6] \Sentra\
[B7] \Ventra\
[B8] \CRV\
[B9] \TuHoyota\
[B10] \Zameid\
[B11] \Fit\
[B12] \Civic\
[B13] \No sabe fallar\
[C3] \DATO\
[C4] \a\
[N]
[C5] \b\
[C6] \c\
[C7] \d\
[C8] \e\
[C9] \g\
[C10] \--\
[C11] \x\
[C12] \b\
[C13] \?\

[S]
[A1] \Catálogo S\
[A3] \Brand\
[A4] \Hummer\
[A5] \Hummer\
[A6] \Ford\
[A7] \Ford\
[A8] \Chevrolet\
[A9] \Chevrolet\
[B3] \Carro\
[B4] \H3\
[B5] \H2\
[B6] \Ka\
[B7] \Exploter\
[B8] \Spank\
[B9] \Chevy\
[C3] \Campo\
[C4] \8.81063830658396\
[C5] \7.26757075058705\
[C6] \1.17157911971267\
[C7] \4.03875095145369\
[C8] \6.13038631666927\
[C9] \6.21706932805607\
[D3] \Traviesa\
[D4] \6.30113621112\
[D5] \4.33891429727652\
[S]
[D6] \4.98945367454637\
[D7] \3.33697476316045\
[D8] \6.10761154948007\
[D9] \7.30097305044152\

Nombres:
 [Captura!_FilterDatabase] =S!$A$3:$D$9
 [Listados!_FilterDatabase] =N!$A$3:$C$13
 [N!_FilterDatabase] =N!$A$3:$C$13
 [S!_FilterDatabase] =S!$A$3:$D$9
 [CATALOGO_N] =N!$A$3:$C$13
 [CATALOGO_S] =S!$A$3:$D$9
 [CONDICION_MARCA] =Listados!$C$13:$C$14
 [CONTEO_AUTOS] =Listados!$D$14
 [CONTEO_MARCAS] =Listados!$A$14
 [Listados!Criteria] =Listados!$C$13:$C$14
 [DESTINO_AUTOS] =Listados!$C$16
 [DESTINO_MARCAS] =Listados!$A$16
 [Listados!Extract] =Listados!$C$16:$E$16
 [INPUT_CELLS] =Captura!$B$3,Captura!$B$5,Captura!$B$7
 [METACAT] =Listados!$A$5:$D$6
 [Metacat.Campo_Auto] =Listados!$D$3
 [Metacat.Campo_Marca] =Listados!$C$3
 [Metacat.Catálogo] =Listados!$A$3
 [Metacat.Rango_Nombrado] =Listados!$B$3
 [SELECCION_AUTO] =Captura!$B$7
 [SELECCION_MARCA] =Captura!$B$5
 [SELECCION_TIPO] =Captura!$B$3

Nombre del proyecto VB: [VBAProject]

Módulos VBA:
 [ThisWorkbook] Tipo: 100
 [Sheet1] Tipo: 100
 [Module1] Tipo: 1
 [Module2] Tipo: 1
 [Sheet2] Tipo: 100
 [Sheet3] Tipo: 100
 [Sheet4] Tipo: 100

Codigo:
[ThisWorkbook] 0 líneas de código.
///--- BEGINNING OF MODULE ---
\\\--- END OF MODULE ---

[Sheet1] 26 líneas de código.
///--- BEGINNING OF MODULE ---
Private Sub Worksheet_Change(ByVal Target As Range)
On Error GoTo ErrHan
    If Application.Intersect(Target, [INPUT_CELLS]) Is Nothing Then Exit Sub
    
    Debug.Print "Manejando cambio en " & Target.Name.Name & " a [" & Target.Value & "]"
    
    ValidarComboDV [SELECCION_TIPO]
        
    Debug.Print "Actualizando Marcas..." 'Actualiza las marcas
    ExtraerÚnicosPorColumna [Metacat.Rango_Nombrado], _
                            [Metacat.Campo_Marca], _
                            [Destino_Marcas]
    ValidarComboDV [SELECCION_MARCA]
    
    Debug.Print "Actualizando Autos..." 'Actualiza los autos
    ExtraerPorCriteria [Metacat.Rango_Nombrado], _
                       [Condicion_Marca], _
                       [DESTINO_AUTOS], _
                       [Metacat.Campo_Auto]
    ValidarComboDV [SELECCION_AUTO]
    
ErrHan:
    If Err.Number <> 0 Then _
        Debug.Print Err.Number & " - " & Err.Description
End Sub

\\\--- END OF MODULE ---

[Module1] 59 líneas de código.
///--- BEGINNING OF MODULE ---
'Lista única de Marcas
Sub ExtraerÚnicosPorColumna(NomRangoNombrado As String, NomColumna As String, RgDestino As Range)
    'Limpiamos resultados previos
    RgDestino.CurrentRegion.ClearContents

    'Determinamos la columna a extraer los valores únicos
    Dim rgHeader: Set rgHeader = Range(NomRangoNombrado).Rows(1).Find(NomColumna)
    
    Intersect(rgHeader.CurrentRegion, rgHeader.EntireColumn).AdvancedFilter Action:=xlFilterCopy, CopyToRange:=[Destino_Marcas], Unique:=True, criteriaRange:=""
    
    OrdenarFilasPorNombreDeColumna RgDestino.CurrentRegion, NomColumna
End Sub

'Lista filtrada por una Marca particular
Sub ExtraerPorCriteria(NomRangoNombrado As String, RgCriteria As Range, RgDestino As Range, Optional NomColumnaOrdenar As String)
    'Limpiamos resultados previos
    RgDestino.CurrentRegion.ClearContents
    
    Range(NomRangoNombrado).AdvancedFilter Action:=xlFilterCopy, _
                                           criteriaRange:=RgCriteria, _
                                           CopyToRange:=RgDestino, _
                                           Unique:=True
    
    If NomColumnaOrdenar <> "" Then _
        OrdenarFilasPorNombreDeColumna RgDestino.CurrentRegion, NomColumnaOrdenar
End Sub

Sub OrdenarFilasPorNombreDeColumna(rgAOrdenar As Range, NomColumna As String)
    'Determinar la columna de ordenamiento
    Dim rgHeader: Set rgHeader = rgAOrdenar.Rows(1).Find(NomColumna)
        
    If rgHeader Is Nothing Then Exit Sub 'No existe la columna? Nothing to do.
    
    'Determinar el Rango (Columna sin encabezado)
    Dim rgKey As Range
    Set rgKey = Intersect(rgHeader.EntireColumn, _
                          rgAOrdenar, _
                          rgAOrdenar.Offset(1, 0))
    
    If rgKey Is Nothing Then Exit Sub 'No hay filas?
    
    With rgAOrdenar.Parent.Sort
        .SortFields.Clear
        
        .SortFields.Add Key:=rgKey, _
                        SortOn:=xlSortOnValues, _
                        Order:=xlAscending, _
                        DataOption:=xlSortNormal
                             
        .SetRange rgAOrdenar
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
End Sub

\\\--- END OF MODULE ---

[Module2] 22 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit

'Si la selección de la celda no es válida, seleccionar la primera disponible.
Sub ValidarComboDV(AValidar As Range)
    
    Debug.Print "Validando " & AValidar.Name.Name & " [" & AValidar.Value & "]"
    
    If Not AValidar.Validation.Value Then
        
        On Error Resume Next 'Si no hay un rango válido, ocurre un error y el objeto 'Is Nothing'
        Dim rgOpcionesVálidas As Range: Set rgOpcionesVálidas = Range(AValidar.Validation.Formula1)
        On Error GoTo 0
        
        Dim NewValue: NewValue = ""
        If Not rgOpcionesVálidas Is Nothing Then _
            NewValue = rgOpcionesVálidas.Cells(1)
        Debug.Print "...No Válido. Asignado [" & NewValue & "]"
        AValidar.Value = NewValue
    Else
        Debug.Print "...Válido"
    End If
End Sub
\\\--- END OF MODULE ---

[Sheet2] 0 líneas de código.
///--- BEGINNING OF MODULE ---
\\\--- END OF MODULE ---

[Sheet3] 0 líneas de código.
///--- BEGINNING OF MODULE ---
\\\--- END OF MODULE ---

[Sheet4] 0 líneas de código.
///--- BEGINNING OF MODULE ---
\\\--- END OF MODULE ---


** Fin del proceso de exportación. Proceso realizado en 0.00 minutos. **
ExportToTxt [ExportToTxt.xls] v3.0.0-SNAPSHOT (Standalone)
